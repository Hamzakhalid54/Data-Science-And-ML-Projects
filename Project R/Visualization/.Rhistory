install.packages("drat")
drat::addRepo("schochastics")
install.packages("networkdata")
library(networkdata)
data(package = "networkdata")
data("animal_25")
install.packages("ggplot2")
library(ggplot2)
str(animal_25)
head(animal_25)
ggplot(animal_25, aes(x = your_numeric_attribute)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Histogram of Numeric Attribute", x = "Attribute", y = "Frequency")
net <- animal_25[[1]]
library(igraph)
plot(net)
degree_distribution <- degree(net)
degree_df <- data.frame(degree = degree_distribution)
ggplot(degree_df, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
labs(title = "Degree Distribution", x = "Degree", y = "Frequency")
plot(net, vertex.size = sqrt(degree_distribution) * 3, vertex.label.cex = 0.7)
# Calculate betweenness centrality
betweenness_centrality <- betweenness(net)
# Calculate closeness centrality
closeness_centrality <- closeness(net)
# Create a data frame for ggplot
centrality_df <- data.frame(
betweenness = betweenness_centrality,
closeness = closeness_centrality
)
# Plot for Betweenness Centrality
ggplot(centrality_df, aes(x = betweenness)) +
geom_histogram(fill = "lightgreen", color = "black", bins = 30) +
labs(title = "Betweenness Centrality Distribution", x = "Betweenness", y = "Frequency")
# Plot for Closeness Centrality
ggplot(centrality_df, aes(x = closeness)) +
geom_histogram(fill = "lightblue", color = "black", bins = 30) +
labs(title = "Closeness Centrality Distribution", x = "Closeness", y = "Frequency")
# Detect communities
communities <- cluster_fast_greedy(net)
# Assign a community ID to each node
membership <- membership(communities)
plot(net, vertex.color = membership, vertex.size = 5, vertex.label.cex = 0.7)
# Extract edge weights
edge_weights <- E(net)$weight
# Create a data frame for the edge weights
weights_df <- data.frame(weight = edge_weights)
# Plot histogram of edge weights
ggplot(weights_df, aes(x = weight)) +
geom_histogram(fill = "tomato", bins = 30, color = "black") +
labs(title = "Edge Weight Distribution", x = "Weight", y = "Frequency")
plot(net, edge.width = E(net)$weight, vertex.size = 5, vertex.label.cex = 0.7)
normalized_weights <- E(net)$weight / max(E(net)$weight) * 5
plot(net, edge.width = normalized_weights, vertex.size = 5, vertex.label.cex = 0.7)
plot(net, edge.width = E(net)$weight)
scaled_weights <- E(net)$weight / max(E(net)$weight) * 10  # Scaling factor
plot(net, edge.width = scaled_weights)
